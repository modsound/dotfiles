[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
  " 自動削除有効化
  let g:dein#auto_recache = 1
'''

# -----------------------------------------------------------------------
# ファイラ/ターミナル
# -----------------------------------------------------------------------

[[plugins]] # ファイラ
repo = 'lambdalisue/fern.vim'
hook_add = '''
" 起動
nnoremap <silent><C-w> :Fern . -drawer -reveal=% -toggle -stay<CR>

" Boxフォルダを開く
nnoremap <silent><Leader>m :Fern $HOME/Library/CloudStorage/Box-Box/ -drawer -toggle -stay<CR>

" 隠しファイルを表示する
let g:fern#default_hidden=1

" キーマップ
function! s:fern_init() abort
  nmap <buffer> o <Plug>(fern-action-open:side)
  nmap <buffer> M <Plug>(fern-action-new-dir)
  nmap <buffer> ! <Plug>(fern-action-hidden:toggle)
  nmap <buffer> - <Plug>(fern-action-mark:toggle)
  vmap <buffer> - <Plug>(fern-action-mark:toggle)
  nmap <buffer> C <Plug>(fern-action-clipboard-copy)
  nmap <buffer> X <Plug>(fern-action-clipboard-move)
  nmap <buffer> P <Plug>(fern-action-clipboard-paste)
  nmap <buffer> h <Plug>(fern-action-collapse)
  nmap <buffer> c <Plug>(fern-action-copy)
  nmap <buffer> <leader>h <Plug>(fern-action-leave)
  nmap <buffer> m <Plug>(fern-action-move)
  nmap <buffer> N <Plug>(fern-action-new-file)
  nmap <buffer> <cr> <Plug>(fern-action-open-or-enter)
  nmap <buffer> l <Plug>(fern-action-open-or-expand)
  nmap <buffer> s <Plug>(fern-action-open:select)
  nmap <buffer> t <Plug>(fern-action-open:tabedit)
  nmap <buffer> r <Plug>(fern-action-rename)
  nmap <buffer> i <Plug>(fern-action-reveal)
  nmap <buffer> D <Plug>(fern-action-trash)
  nmap <buffer> y <Plug>(fern-action-yank)
  nmap <buffer> gr <Plug>(fern-action-grep)
  nmap <buffer> d <Plug>(fern-action-remove)
  nmap <buffer> B <Plug>(fern-action-save-as-bookmark)
  nmap <buffer> cd <Plug>(fern-action-tcd)
endfunction

augroup FernEvents
  autocmd!
  autocmd FileType fern call s:fern_init()
augroup END

" デフォルトのキーマップを無効化
let g:fern#disable_default_mappings = 1
'''

[[plugins]] # fernの動作改善
repo = 'antoinemadec/FixCursorHold.nvim'

[[plugins]] # fuzzy finder
repo = "nvim-lua/plenary.nvim"

[[plugins]] # fuzzy finder
repo = "nvim-telescope/telescope.nvim"
hook_add = '''
nnoremap <leader>f <cmd>lua require('telescope.builtin').find_files()<cr>
nnoremap <leader>g <cmd>lua require('telescope.builtin').live_grep()<cr>
'''

[[plugins]] # インタプリタ実行
repo = 'thinca/vim-quickrun'
hook_add = '''
nnoremap <Leader>r :QuickRun -mode n<CR>
vnoremap <Leader>r :QuickRun -mode v<CR>

" 実行時のウィンドウの開き方を指定する
let g:quickrun_config = {
    \ '_': {
        \ 'outputter': 'error',
        \ 'outputter/error/success': 'quickfix',
        \ 'outputter/error/error'  : 'quickfix',
        \ 'outputter/buffer/split' : ':botright 8sp',
        \ 'outputter/buffer/close_on_empty': 1,
      \ }
    \ }
'''

# -----------------------------------------------------------------------
# 表示
# -----------------------------------------------------------------------

[[plugins]] # カラースキーマ
repo = 'jonathanfilip/vim-lucius'

[[plugins]] # インデントに線を表示する
repo = 'Yggdroot/indentLine'
hook_add = '''
let g:indentLine_color_term =239
let g:indentLine_color_gui = '#708090'
let g:indentLine_char = '¦'
'''

[[plugins]] # ステータスバーを見やすくする
repo = 'vim-airline/vim-airline'
hook_add = '''
" 隣のバッファに移動する
nmap <C-n> <Plug>AirlineSelectNextTab
nmap <C-p> <Plug>AirlineSelectPrevTab

" ステータスラインの表示を変更する
let g:airline#extensions#default#layout = [
  \ [ 'a', 'b', 'c' ], ['x', 'y', 'z']
\ ]
let g:airline_section_b = '%{getcwd()}'    " カレントディレクトリを表示する
let g:airline_section_c = '%t %M'          " ファイル名だけ表示する
let g:airline_section_z = get(g:, 'airline_linecolumn_prefix', '').'%p%%'

" バッファタブの表示を変更する
let g:airline#extensions#tabline#enabled = 1        " タブライン機能を有効にする
let g:airline#extensions#tabline#fnamemod = ':t'    " ファイルパスを表示しない
let g:airline#extensions#tabline#show_buffers = 1   " バッファを表示する
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

# -----------------------------------------------------------------------
# 補完
# -----------------------------------------------------------------------

[[plugins]] # Rubyのend等を自動入力する
repo = 'tpope/vim-endwise'

[[plugins]] # LSPを使う
repo = 'neoclide/coc.nvim'
rev = 'release'
on_i = 1
build = '''
git checkout release
'''
hook_add = '''
" 対応言語追加
let g:coc_global_extensions = [
  \ 'coc-json', 'coc-css', 'coc-prettier','coc-jedi', 'coc-vimlsp', 'coc-sh', 'coc-git',
  \ 'coc-toml', 'coc-yaml', 'coc-solargraph', 'coc-pairs', 'coc-word', 'coc-html'
\ ]

" <S-J><S-K>で候補選択
inoremap <silent><expr> <S-J> pumvisible() ? "\<C-n>" : <SID>check_back_space() ? "\<S-J>" : coc#refresh()
inoremap <expr><S-K> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" 定義に移動
nmap <silent>gd <Plug>(coc-definition)
nmap <silent>gy <Plug>(coc-type-definition)
nmap <silent>gi <Plug>(coc-implementation)
nmap <silent>gr <Plug>(coc-references)
'''

[[plugins]] # コメントアウトする
repo = 'tyru/caw.vim.git'
hook_add = '''
nmap cc <Plug>(caw:hatpos:toggle)
vmap cc <Plug>(caw:hatpos:toggle)
'''

[[plugins]] # 括弧で囲う
repo = 'tpope/vim-surround'

# -----------------------------------------------------------------------
# 移動
# -----------------------------------------------------------------------

[[plugins]] # 選択行を移動する
repo = 't9md/vim-textmanip'
hook_add = '''
vmap <C-j> <Plug>(textmanip-move-down)
vmap <C-k> <Plug>(textmanip-move-up)
vmap <C-h> <Plug>(textmanip-move-left)
vmap <C-l> <Plug>(textmanip-move-right)
'''

[[plugins]] # 行を跨いでf移動できるようにする
repo = 'rhysd/clever-f.vim'

# -----------------------------------------------------------------------
# 特定言語
# -----------------------------------------------------------------------

[[plugins]] # rails
repo = 'tpope/vim-rails'

[[plugins]] # markdown
repo = 'plasticboy/vim-markdown'
hook_add = '''
" 折りたたみを無効化する
let g:vim_markdown_folding_disabled = 1
" デフォルトのキーマップを無効化する
let g:vim_markdown_no_default_key_mappings = 1
'''

[[plugins]] # pythonのインデントをPEP8準拠にする
repo = 'Vimjas/vim-python-pep8-indent'
