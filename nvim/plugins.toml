[[plugins]]
repo = 'Shougo/dein.vim'

# -----------------------------------------------------------------------
# ファイラ/ターミナル
# -----------------------------------------------------------------------
[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
  " 起動
  nnoremap <silent><C-t> :Fern . -drawer -reveal=% -toggle -stay<CR>
  " 隠しファイルを表示する
  let g:fern#default_hidden=1

  " キーマップ
  function! s:fern_init() abort
    nmap <buffer> v <Plug>(fern-action-open:side)
    nmap <buffer> M <Plug>(fern-action-new-dir)
    nmap <buffer> ! <Plug>(fern-action-hidden:toggle)
    nmap <buffer> - <Plug>(fern-action-mark:toggle)
    vmap <buffer> - <Plug>(fern-action-mark:toggle)
    nmap <buffer> C <Plug>(fern-action-clipboard-copy)
    nmap <buffer> X <Plug>(fern-action-clipboard-move)
    nmap <buffer> P <Plug>(fern-action-clipboard-paste)
    nmap <buffer> h <Plug>(fern-action-collapse)
    nmap <buffer> c <Plug>(fern-action-copy)
    nmap <buffer> <leader>h <Plug>(fern-action-leave)
    nmap <buffer> m <Plug>(fern-action-move)
    nmap <buffer> N <Plug>(fern-action-new-file)
    nmap <buffer> <cr> <Plug>(fern-action-open-or-enter)
    nmap <buffer> l <Plug>(fern-action-open-or-expand)
    nmap <buffer> s <Plug>(fern-action-open:select)
    nmap <buffer> t <Plug>(fern-action-open:tabedit)
    nmap <buffer> r <Plug>(fern-action-rename)
    nmap <buffer> i <Plug>(fern-action-reveal)
    nmap <buffer> D <Plug>(fern-action-trash)
    nmap <buffer> y <Plug>(fern-action-yank)
    nmap <buffer> gr <Plug>(fern-action-grep)
    nmap <buffer> d <Plug>(fern-action-remove)
    nmap <buffer> B <Plug>(fern-action-save-as-bookmark)
    nmap <buffer> cd <Plug>(fern-action-tcd)
  endfunction

  augroup FernEvents
    autocmd!
    autocmd FileType fern call s:fern_init()
  augroup END

  " デフォルトのキーマップを無効化
  let g:fern#disable_default_mappings = 1
'''

[[plugins]] # fernの動作改善
repo = 'antoinemadec/FixCursorHold.nvim'

# -----------------------------------------------------------------------
# 表示
# -----------------------------------------------------------------------
[[plugins]] # カラースキーマ
repo = 'jonathanfilip/vim-lucius'

[[plugins]] # インデントに線を表示する
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indentLine_color_term =239
  let g:indentLine_color_gui = '#708090'
  let g:indentLine_char = '¦'
'''

[[plugins]] # ステータスバーを見やすくする
repo = 'vim-airline/vim-airline'

[[plugins]] # vim-airlineのテーマ
repo = 'vim-airline/vim-airline-themes'

[[plugins]] # バッファをタブ表示する
repo = 'ap/vim-buftabline'

# -----------------------------------------------------------------------
# 補完
# -----------------------------------------------------------------------
[[plugins]] # Rubyのend等を自動入力する
repo = 'tpope/vim-endwise'

[[plugins]] # LSPを使う
repo = 'neoclide/coc.nvim'
rev = 'release'
on_i = 1
build = '''
  git checkout release
'''
hook_add = '''
  " 対応言語追加
  let g:coc_global_extensions = [
    \ 'coc-json', 'coc-css', 'coc-prettier', 'coc-python', 'coc-markdownlint', 'coc-vimlsp', 'coc-sh', 'coc-toml', 'coc-yaml', 'coc-pairs'
  \ ]

  " <S-J><S-K>で候補選択
  inoremap <silent><expr> <S-J> pumvisible() ? "\<C-n>" : <SID>check_back_space() ? "\<S-J>" : coc#refresh()
  inoremap <expr><S-K> pumvisible() ? "\<C-p>" : "\<C-h>"

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  " 定義に移動
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)
'''

# -----------------------------------------------------------------------
# 移動
# -----------------------------------------------------------------------
[[plugins]] # 選択行を移動する
repo = 't9md/vim-textmanip'
hook_add = '''
  vmap <C-j> <Plug>(textmanip-move-down)
  vmap <C-k> <Plug>(textmanip-move-up)
  vmap <C-h> <Plug>(textmanip-move-left)
  vmap <C-l> <Plug>(textmanip-move-right)
'''
